package cn.edu.tsinghua.tidhandler;


import cn.edu.tsinghua.format.XTPFrameFormat;
import cn.edu.tsinghua.state.GlobalStateItems;
import cn.edu.tsinghua.utils.DFEUtils;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.networking.v1.framed_kernels.FrameData;
import com.maxeler.networking.v1.framed_kernels.FramedKernel;

public class NtfOrderHandler extends NtfTIDBaseHandler {

	private final int MAX_ORDER_FIELD_SIZE = 1;
	private final DFEVar isInstrumentIDCycleValid[] = new DFEVar[MAX_ORDER_FIELD_SIZE];
	@SuppressWarnings("unchecked")
  DFEVector<DFEVar> instrumentIDs[] = new DFEVector[MAX_ORDER_FIELD_SIZE];

	private final DFEVar isOrderSysIDCycleValid[] = new DFEVar[MAX_ORDER_FIELD_SIZE];
	@SuppressWarnings("unchecked")
	DFEVector<DFEVar> orderSysIDs[] = new DFEVector[MAX_ORDER_FIELD_SIZE];

	private final DFEVar isOrderStatusCycleValid[] = new DFEVar[MAX_ORDER_FIELD_SIZE];
	@SuppressWarnings("unchecked")
	DFEVector<DFEVar> orderStatuses[] = new DFEVector[MAX_ORDER_FIELD_SIZE];

	private final DFEVar isVolumeTotalCycleValid[] = new DFEVar[MAX_ORDER_FIELD_SIZE];
	DFEVar volumeTotals[] = new DFEVar[MAX_ORDER_FIELD_SIZE];

	private final DFEVar isDirectionCycleValid[] = new DFEVar[MAX_ORDER_FIELD_SIZE];
	@SuppressWarnings("unchecked")
  DFEVector<DFEVar> directions[] = new DFEVector[MAX_ORDER_FIELD_SIZE];

	private final DFEVar isLimitPriceCycleValid[] = new DFEVar[MAX_ORDER_FIELD_SIZE];
	DFEVar limitPrices[] = new DFEVar[MAX_ORDER_FIELD_SIZE];

	/// setup a data member to record the max orderSysID
	private static Memory<DFEVector<DFEVar>> maxOrderSysID = null;
	private static Memory<DFEVector<DFEVar>> getMaxOrderSysID(KernelLib kernel) {
	  maxOrderSysID = kernel.mem.alloc(ItemType.COrderSysIDType, 2);
	  return maxOrderSysID;
	}

	public NtfOrderHandler(FramedKernel k, FrameData<XTPFrameFormat> fin,
			DFEVar [] bytes, DFEVar count, int expectedTID)
	{
		super(k, fin, bytes, count, expectedTID);
	}

	@Override
	public DFEVar process() {

		//Extract InstrumentID from Order Pkt
		for(int i = 0; i < MAX_ORDER_FIELD_SIZE; i ++)
		{
			/// 77:  offset of InstrumentID in COrderField
			/// 303: sizeof(COrderField) + 4(Length of FieldHeader)
			int currCycle = (77 + 303 * i) / 8;
			int currStartIndex = (77 + 303 * i) % 8;
			isInstrumentIDCycleValid[i] = cycleCount.eq(currCycle) & isValidPkg;
			instrumentIDs[i] = ItemType.CInstrumentIDType.newInstance(kernel);
			DFEUtils.groupCharToVector(kernel, instrumentIDs[i], currByte, currStartIndex, 0, 31);
			debug.simPrintf(isInstrumentIDCycleValid[i],"Kernel Got in Cycle %d in InstrumentID For Loop\n", cycleCount);
			DFEUtils.printCharVector(kernel, "Bytes in InstrumentID:", instrumentIDs[i], isInstrumentIDCycleValid[i]);
		}

		//Extract OrderSysID from Order Pkt
		for(int i = 0; i < MAX_ORDER_FIELD_SIZE; i ++)
		{
			//26:offset of OrderSysID in COrderField
			//303: sizeof(COrderField) + 4(Length of FieldHeader)
			int currCycle = (26 + 303 * i) / 8;
			int currStartIndex = (26 + 303 * i) % 8;
			isOrderSysIDCycleValid[i] = cycleCount.eq(currCycle) & isValidPkg;
			orderSysIDs[i] = ItemType.COrderSysIDType.newInstance(kernel);
			DFEUtils.groupCharToVector(kernel, orderSysIDs[i], currByte, currStartIndex, 0, 13);
			debug.simPrintf(isOrderSysIDCycleValid[i],"Kernel Got in Cycle %d in OrderSysID for loop\n", cycleCount);
			DFEUtils.printCharVector(kernel, "Bytes in OrderSysID:", orderSysIDs[i], isOrderSysIDCycleValid[i]);
		}


		//Extract OrderStatus from Order Pkt
		for(int i = 0; i < MAX_ORDER_FIELD_SIZE; i ++)
		{
			//200:offset of OrderSysID in COrderField
			//303: sizeof(COrderField) + 4(Length of FieldHeader)
			int currCycle = (204 + 303 * i) / 8;
			int currStartIndex = (204 + 303 * i) % 8;
			isOrderStatusCycleValid[i] = cycleCount.eq(currCycle) & isValidPkg;
			orderStatuses[i] = ItemType.COrderStatusType.newInstance(kernel);
			DFEUtils.groupCharToVector(kernel, orderStatuses[i], currByte, currStartIndex, 0, 1);
			debug.simPrintf(isOrderStatusCycleValid[i],"Kernel Got in Cycle %d in OrderStatus for loop\n", cycleCount);
			DFEUtils.printCharVector(kernel, "Bytes in OrderStatus:", orderStatuses[i], isOrderStatusCycleValid[i]);
		}

		//Extract VolumeTotal from Order Pkt
		for(int i = 0; i < MAX_ORDER_FIELD_SIZE; i ++)
		{
			//210:offset of VolumeTotal in COrderField
			//303: sizeof(COrderField) + 4(Length of FieldHeader)
			int currCycle = (210 + 303 * i) / 8;
			int currStartIndex = (210 + 303 * i) % 8;
			isVolumeTotalCycleValid[i] = cycleCount.eq(currCycle) & isValidPkg;
			volumeTotals[i] = ItemType.CVolumeTotalType.newInstance(kernel);
			DFEUtils.groupByteToDFEVar32(kernel, volumeTotals[i], currByte, currStartIndex, 0, 4);
			debug.simPrintf(isVolumeTotalCycleValid[i],"Kernel Got in Cycle %d in isVolumeTotalCycleValid For Loop, VolumeTotal = %d\n", cycleCount, volumeTotals[i]);

		}

		//Extract Direction from Order Pkt
		for(int i = 0; i < MAX_ORDER_FIELD_SIZE; i ++)
		{
			//109:offset of Direction in COrderField
			//303: sizeof(COrderField) + 4(Length of FieldHeader)
			int currCycle = (109 + 303 * i) / 8;
			int currStartIndex = (109 + 303 * i) % 8;
			isDirectionCycleValid[i] = cycleCount.eq(currCycle) & isValidPkg;
			directions[i] = ItemType.CDirectionType.newInstance(kernel);
			DFEUtils.groupCharToVector(kernel, directions[i], currByte, currStartIndex, 0, 1);
			debug.simPrintf(isDirectionCycleValid[i],"Kernel Got in Cycle %d in OrderStatus for loop\n", cycleCount);
			DFEUtils.printCharVector(kernel, "Bytes in Direction:", directions[i], isDirectionCycleValid[i]);
		}

		//Extract LimitPrice from Order Pkt
		for(int i = 0; i < MAX_ORDER_FIELD_SIZE; i ++)
		{
			//120:offset of LimitPrice in COrderField
			//303: sizeof(COrderField) + 4(Length of FieldHeader)
			int currCycle = (120 + 303 * i) / 8;
			int currStartIndex = (120 + 303 * i) % 8;
			isLimitPriceCycleValid[i] = cycleCount.eq(currCycle) & isValidPkg;
			limitPrices[i] = ItemType.CLimitPriceType.newInstance(kernel);
			DFEUtils.groupByteToDFEVar64(kernel, limitPrices[i], currByte, currStartIndex, 0, 8);
			debug.simPrintf(isLimitPriceCycleValid[i],"Kernel Got in Cycle %d in isLimitPriceCycleValid For Loop, LimitPrice = %f\n", cycleCount, limitPrices[i]);

		}

		return GlobalStateItems.commPhaseNo;
	}

}
