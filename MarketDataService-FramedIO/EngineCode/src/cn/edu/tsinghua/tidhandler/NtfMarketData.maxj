package cn.edu.tsinghua.tidhandler;


import cn.edu.tsinghua.format.XTPFrameFormat;

import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.networking.v1.framed_kernels.FrameData;
import com.maxeler.networking.v1.framed_kernels.FramedKernel;

public class NtfMarketData extends TidHandlerBase {

  public NtfMarketData(FramedKernel k, FrameData<XTPFrameFormat> fin,
      DFEVar[] bytes, DFEVar count, int expectedTID) {
    super(k, fin, bytes, count, expectedTID);
  }

  @Override
  public DFEVar process() {

    DFEVar isCycle0th = cycleCount === 0 & isValidPkg;
    DFEVar isCycle4th = cycleCount === 4 & isValidPkg;
    DFEVar isCycle6th = cycleCount === 6 & isValidPkg;

    DFEVar increaseWriteAddress = isCycle0th | isCycle4th | isCycle6th;

    Params itemsAccParams =
      Reductions.accumulator.makeAccumulatorConfig(ItemType.uint8_t).withEnable(increaseWriteAddress);

    kernel.pushResetBetweenFrames(false);
    DFEVar tailAddress =Reductions.accumulator.makeAccumulator(
      kernel.constant.var(1).cast(ItemType.uint8_t),
      itemsAccParams);
    kernel.popResetBetweenFrames();

    /// start your work
    debug.simPrintf("tailAddress: %d\n", tailAddress);

    return kernel.constant.var(true);
  }


}
