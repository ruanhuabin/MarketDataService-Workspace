package cn.edu.tsinghua.bram;

import cn.edu.tsinghua.tidhandler.ItemType;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;

public class CMarketDataField {
  private static final int totalBitSize = 8;
  private static final int MAX_NUM_INSTRUMENT = (int)Math.pow(2, totalBitSize);

  private static Memory<DFEVector<DFEVar>> TradingDay = null;
  public static Memory<DFEVector<DFEVar>> getTradingDay(KernelLib kernel) {
    TradingDay = kernel.mem.alloc(ItemType.CDayType, MAX_NUM_INSTRUMENT);
    return TradingDay;
  }

  private static Memory<DFEVector<DFEVar>> SettlementGroupID = null;
  public static Memory<DFEVector<DFEVar>> getSettlementGroupID(KernelLib kernel) {
    SettlementGroupID = kernel.mem.alloc(ItemType.CSettlementGroupIDType, MAX_NUM_INSTRUMENT);
    return SettlementGroupID;
  }

  private static Memory<DFEVar> SettlementID = null;
  public static Memory<DFEVar> getSettlementID(KernelLib kernel) {
    SettlementID = kernel.mem.alloc(ItemType.CSettlementIDType, MAX_NUM_INSTRUMENT);
    return SettlementID;
  }

  private static Memory<DFEVar> LastPrice = null;
  public static Memory<DFEVar> getLastPrice(KernelLib kernel) {
    LastPrice = kernel.mem.alloc(ItemType.CPriceType, MAX_NUM_INSTRUMENT);
    return LastPrice;
  }

  private static Memory<DFEVar> PreSettlementPrice = null;
  public static Memory<DFEVar> getPreSettlementPrice(KernelLib kernel) {
    PreSettlementPrice = kernel.mem.alloc(ItemType.CPriceType, MAX_NUM_INSTRUMENT);
    return PreSettlementPrice;
  }

  private static Memory<DFEVar> PreClosePrice = null;
  public static Memory<DFEVar> getPreClosePrice(KernelLib kernel) {
    PreClosePrice = kernel.mem.alloc(ItemType.CPriceType, MAX_NUM_INSTRUMENT);
    return PreClosePrice;
  }

  private static Memory<DFEVar> PreOpenInterest = null;
  public static Memory<DFEVar> getPreOpenInterest(KernelLib kernel) {
    PreOpenInterest = kernel.mem.alloc(ItemType.CLargeVolumeType, MAX_NUM_INSTRUMENT);
    return PreOpenInterest;
  }

  private static Memory<DFEVar> OpenPrice = null;
  public static Memory<DFEVar> getOpenPrice(KernelLib kernel) {
    OpenPrice = kernel.mem.alloc(ItemType.CPriceType, MAX_NUM_INSTRUMENT);
    return OpenPrice;
  }

  private static Memory<DFEVar> HighestPrice = null;
  public static Memory<DFEVar> getHighestPrice(KernelLib kernel) {
    HighestPrice = kernel.mem.alloc(ItemType.CPriceType, MAX_NUM_INSTRUMENT);
    return HighestPrice;
  }

  private static Memory<DFEVar> LowestPrice = null;
  public static Memory<DFEVar> getLowestPrice(KernelLib kernel) {
    LowestPrice = kernel.mem.alloc(ItemType.CPriceType, MAX_NUM_INSTRUMENT);
    return LowestPrice;
  }

  private static Memory<DFEVar> Volume = null;
  public static Memory<DFEVar> getVolume(KernelLib kernel) {
    Volume = kernel.mem.alloc(ItemType.CVolumeType, MAX_NUM_INSTRUMENT);
    return Volume;
  }

  private static Memory<DFEVar>  TurnOver= null;
  public static Memory<DFEVar> getTurnOver(KernelLib kernel) {
    TurnOver = kernel.mem.alloc(ItemType.CMoneyType, MAX_NUM_INSTRUMENT);
    return TurnOver;
  }


  private static Memory<DFEVar> OpenInterest = null;
  public static Memory<DFEVar> get(KernelLib kernel) {
    OpenInterest = kernel.mem.alloc(ItemType.CLargeVolumeType, MAX_NUM_INSTRUMENT);
    return OpenInterest;
  }


  private static Memory<DFEVar>  ClosePrice = null;
  public static Memory<DFEVar> getClosePrice(KernelLib kernel) {
    ClosePrice = kernel.mem.alloc(ItemType.CPriceType, MAX_NUM_INSTRUMENT);
    return ClosePrice;
  }


  private static Memory<DFEVar>  SettlementPrice = null;
  public static Memory<DFEVar> getSettlementPrice(KernelLib kernel) {
    SettlementPrice = kernel.mem.alloc(ItemType.CPriceType, MAX_NUM_INSTRUMENT);
    return SettlementPrice;
  }


  private static Memory<DFEVar> UpperLimitPrice = null;
  public static Memory<DFEVar> getUpperLimitPrice(KernelLib kernel) {
    UpperLimitPrice = kernel.mem.alloc(ItemType.CPriceType, MAX_NUM_INSTRUMENT);
    return UpperLimitPrice;
  }


  private static Memory<DFEVar>  LowerLimitPrice = null;
  public static Memory<DFEVar> getLowerLimitPrice(KernelLib kernel) {
    LowerLimitPrice = kernel.mem.alloc(ItemType.CPriceType, MAX_NUM_INSTRUMENT);
    return LowerLimitPrice;
  }


  private static Memory<DFEVar> PreDelta = null;
  public static Memory<DFEVar> getPreDelta(KernelLib kernel) {
    PreDelta= kernel.mem.alloc(ItemType.CRatioType, MAX_NUM_INSTRUMENT);
    return PreDelta;
  }


  private static Memory<DFEVar> CurrDelta = null;
  public static Memory<DFEVar> getCurrDelta(KernelLib kernel) {
    CurrDelta = kernel.mem.alloc(ItemType.CRatioType, MAX_NUM_INSTRUMENT);
    return CurrDelta;
  }


  private static Memory<DFEVector<DFEVar>> UpdateTime = null;
  public static Memory<DFEVector<DFEVar>> getUpdateTime(KernelLib kernel) {
    UpdateTime = kernel.mem.alloc(ItemType.CTimeType, MAX_NUM_INSTRUMENT);
    return UpdateTime;
  }


  private static Memory<DFEVar>  UpdateMillisec= null;
  public static Memory<DFEVar> getUpdateMillisec(KernelLib kernel) {
    UpdateMillisec = kernel.mem.alloc(ItemType.CMillisecType, MAX_NUM_INSTRUMENT);
    return UpdateMillisec;
  }


  private static Memory<DFEVector<DFEVar>> InstrumentID = null;
  public static Memory<DFEVector<DFEVar>> getInstrumentID(KernelLib kernel) {
    InstrumentID = kernel.mem.alloc(ItemType.CInstrumentIDType, MAX_NUM_INSTRUMENT);
    return InstrumentID;
  }

}
