package cn.edu.tsinghua.tidhandler;


import cn.edu.tsinghua.constant.MDGlobalStateConstants;
import cn.edu.tsinghua.format.XTPFrameFormat;
import cn.edu.tsinghua.state.GlobalStateItems;
import cn.edu.tsinghua.utils.DFEUtils;

import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.networking.v1.framed_kernels.FrameData;
import com.maxeler.networking.v1.framed_kernels.FramedKernel;

public class BramTestHandler extends TidHandlerBase {
	public BramTestHandler(FramedKernel k, FrameData<XTPFrameFormat> fin,
			DFEVar [] bytes, DFEVar count, int expectedTID)
	{
		super(k, fin, bytes, count, expectedTID);
	}




	@Override
	public DFEVar process() {
		// TODO Auto-generated method stub

		GlobalStateItems.exchangeDataSyncStatus = constant.var(DFETypeFactory.dfeUInt(2), 1);

		DFEVar isCycle0th = (cycleCount === 0 & isValidPkg);

		/// this only works when cycleCount == 0
		DFEVar fid =      currByte[0].cat(currByte[1]).cast(ItemType.uint16_t);
		DFEVar fieldLen = currByte[2].cat(currByte[3]).cast(ItemType.uint16_t);

		debug.simPrintf(isCycle0th, "fid: 0X%02x\n", fid);
		debug.simPrintf(isCycle0th, "fieldLen: %d\n", fieldLen);

		DFEVar isCycle1st = (cycleCount === 1 & isValidPkg);
		DFEVector<DFEVar> TradingDay = ItemType.CDayType.newInstance(kernel);
		DFEUtils.groupCharToVector(kernel, TradingDay, currByte, 4, -1, 9);

		DFEVar commPhaseNo = currByte[5].cat(currByte[6]).cast(ItemType.CCommPhaseNoType);


		kernel.pushResetBetweenFrames(false);

		DFEVar isCommPhaseChangePktProcess = Reductions.streamHold(isValidPkg, isValidPkg);
//		debug.simPrintf(">>>>>>>>>>>>>>Kernel Got in Cycle[%d]: isCommPhasePktProcess = %d\n", cycleCount, isCommPhaseChangePktProcess);
		commPhaseNo = isCommPhaseChangePktProcess ? Reductions.streamHold(commPhaseNo, isCycle1st ): constant.var(DFETypeFactory.dfeUInt(16), MDGlobalStateConstants.COMM_PHASE_INIT_VALUE);
//		debug.simPrintf("Kernel Got In process() in Cycle [%d]:\n", cycleCount);
//		for(int i = 0; i < 2; i ++)
//		{
//			debug.simPrintf("0x%02x ", commPhaseNo.slice(i * 8, 8));
//		}
//		debug.simPrintf("\n");
		setCommPhaseNo(commPhaseNo, isCycle1st, isCommPhaseChangePktProcess);
		kernel.popResetBetweenFrames();

		return GlobalStateItems.commPhaseNo;
	}

//	public DFEVar getCommPhaseNo()
//	{
//		return GlobalStateItems.commPhaseNo;
//	}

	private void setCommPhaseNo(DFEVar commPhaseNo, DFEVar isCycle1st, DFEVar isCommPhaseChangePktProcess)
	{


		GlobalStateItems.commPhaseNo = commPhaseNo;
//		debug.simPrintf("Kernel Got In SET before reduction in Cycle [%d], isValidPkg = %d, isCycle1st = %d:\n", cycleCount, isValidPkg, isCycle1st);
//		for(int i = 0; i < 2; i ++)
//		{
//			debug.simPrintf("0x%02x ", GlobalStateItems.commPhaseNo.slice(i * 8, 8));
//		}
//		debug.simPrintf("\n");

		GlobalStateItems.commPhaseNo = Reductions.streamHold(commPhaseNo, isCycle1st | isCommPhaseChangePktProcess.eq(false));

//		debug.simPrintf("Kernel Got In SET After reduction in Cycle [%d], isValidPkg = %d, isCycle1st = %d:\n", cycleCount, isValidPkg, isCycle1st);
//		for(int i = 0; i < 2; i ++)
//		{
//			debug.simPrintf("0x%02x ", GlobalStateItems.commPhaseNo.slice(i * 8, 8));
//		}
//		debug.simPrintf("\n");
	}

}
