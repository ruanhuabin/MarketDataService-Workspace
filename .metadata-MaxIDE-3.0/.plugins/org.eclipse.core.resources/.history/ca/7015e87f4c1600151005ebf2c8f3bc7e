package cn.edu.tsinghua.kernel;

import java.util.ArrayList;
import java.util.List;

import cn.edu.tsinghua.constant.TID;
import cn.edu.tsinghua.format.OutputFrameFormat;
import cn.edu.tsinghua.format.OutputLinkType;
import cn.edu.tsinghua.state.GlobalStateItems;
import cn.edu.tsinghua.tidhandler.InitCommPhaseFieldHandler;
import cn.edu.tsinghua.utils.MarketDataUtils;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.Bits;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.networking.v1.framed_kernels.FrameData;
import com.maxeler.networking.v1.framed_kernels.ThroughputFramedKernel;
import com.maxeler.networking.v1.kernel_types.UDPOneToOneRXType;

public class MarketDataServiceKernel extends ThroughputFramedKernel
{
	public static final String frameInputName = "internal";
	public static final String frameOutputName = "myOutput";
	private final int dataBufferCycles = 12;
	public static final OutputLinkType outputLinkType = new OutputLinkType();
	private final DFEVar type;
	private final DFEVar chain;
	private final DFEVar fttype;
	private final DFEVar padding1;
	private DFEVar contentLength;
	private final DFEVar padding2;
	private final DFEVar subjectID;
	private DFEVar tid;
	private final DFEVar commPhaseNo;
	private final DFEVar frontSeqNo;
	private final DFEVar sequenceNo;
	private final DFEVar requestID;
	private final DFEVar sessionID;
	private final DFEVar frontID;
	private final DFEVar padding3;
	private final DFEVar groupID;
	private final DFEVar oldSubjectID;
	private final DFEVar convergenceID;
	private final DFEVar oldSequenceNo;
	private final DFEVar pubNodeID;
	private final DFEVar riskID;
	private final DFEVar matchID;
	private final DFEVar padding4;
	private final DFEVar errorID;
	private final DFEVar content;

	MarketDataServiceKernel(KernelParameters parameters) {
		super(parameters);

		UDPOneToOneRXType udpType = new UDPOneToOneRXType();
		DFEStructType inputType = udpType.getDFEStructType();

		NonBlockingInput<DFEStruct> theInput = io.nonBlockingInput(frameInputName, inputType,
				constant.var(true),
				inputType.getPositionForField(udpType.getEOF()),
				DelimiterMode.EOF_POSITION,
				3,
				NonBlockingMode.NO_TRICKLING);

		DFEStruct inputStruct = theInput.data;
		DFEVar valid = theInput.valid;


		DFEVar cycleCount = control.count.simpleCounter(8);

		DFEVar data = inputStruct.get(udpType.getData());
		DFEVar sof = (DFEVar)inputStruct.get(udpType.getSOF()) & valid;


		//Hold the whole xtp packet into superWord
		DFEVar superWord = null;

		for(int i = dataBufferCycles; i >= 0; i --)
		{
			DFEVar currentBytes = extractMaximumBytes(stream.offset(data, i), 0, 8);
			if( dataBufferCycles == i )
			{
				superWord = currentBytes;
			}
			else
			{
				superWord = superWord # currentBytes;
			}
		}

		this.type = Reductions.streamHold(superWord.slice(0, 8).cast(dfeUInt(8)), sof);
		this.chain = Reductions.streamHold(superWord.slice(8, 8).cast(dfeUInt(8)), sof);
		this.fttype = Reductions.streamHold(superWord.slice(16, 8).cast(dfeUInt(8)), sof);
		this.padding1 = Reductions.streamHold(superWord.slice(24, 8).cast(dfeUInt(8)), sof);
		this.contentLength = Reductions.streamHold(superWord.slice(32, 16).cast(dfeUInt(16)), sof);
		this.padding2 = Reductions.streamHold(superWord.slice(48, 16).cast(dfeUInt(16)), sof);
		this.subjectID = Reductions.streamHold(superWord.slice(64, 32).cast(dfeUInt(32)), sof);
		this.tid = Reductions.streamHold(superWord.slice(96, 32).cast(dfeUInt(32)), sof);
		this.commPhaseNo = Reductions.streamHold(superWord.slice(128, 32).cast(dfeUInt(32)), sof);
		this.sequenceNo = Reductions.streamHold(superWord.slice(160, 32).cast(dfeUInt(32)), sof);
		this.frontSeqNo = Reductions.streamHold(superWord.slice(192, 32).cast(dfeUInt(32)), sof);
		this.requestID = Reductions.streamHold(superWord.slice(224, 32).cast(dfeUInt(32)), sof);
		this.sessionID = Reductions.streamHold(superWord.slice(256, 32).cast(dfeUInt(32)), sof);
		this.frontID = Reductions.streamHold(superWord.slice(288, 16).cast(dfeUInt(16)), sof);
		this.padding3 = Reductions.streamHold(superWord.slice(304, 16).cast(dfeUInt(16)), sof);
		this.groupID = Reductions.streamHold(superWord.slice(320, 32).cast(dfeUInt(32)), sof);
		this.oldSubjectID = Reductions.streamHold(superWord.slice(352, 32).cast(dfeUInt(32)), sof);
		this.convergenceID = Reductions.streamHold(superWord.slice(384, 32).cast(dfeUInt(32)), sof);
		this.oldSequenceNo = Reductions.streamHold(superWord.slice(416, 32).cast(dfeUInt(32)), sof);
		this.pubNodeID = Reductions.streamHold(superWord.slice(448, 16).cast(dfeUInt(16)), sof);
		this.riskID = Reductions.streamHold(superWord.slice(464, 16).cast(dfeUInt(16)), sof);
		this.matchID = Reductions.streamHold(superWord.slice(480, 16).cast(dfeUInt(16)), sof);
		this.padding4 = Reductions.streamHold(superWord.slice(496, 16).cast(dfeUInt(16)), sof);
		this.errorID = Reductions.streamHold(superWord.slice(512, 32).cast(dfeUInt(32)), sof);

		this.contentLength = MarketDataUtils.BeToLe(contentLength).cast(dfeUInt(16));
//		this.subjectID = MarketDataUtils.BeToLe(subjectID);
		this.tid = MarketDataUtils.BeToLe(this.tid).cast(dfeUInt(32));
//		this.commPhaseNo = MarketDataUtils.BeToLe(commPhaseNo);
//		this.sequenceNo = MarketDataUtils.BeToLe(sequenceNo);
//		this.frontSeqNo = MarketDataUtils.BeToLe(frontSeqNo);
//		this.requestID = MarketDataUtils.BeToLe(requestID);
//		this.sessionID = MarketDataUtils.BeToLe(sessionID);
//		this.frontID = MarketDataUtils.BeToLe(frontID);
//		this.groupID = MarketDataUtils.BeToLe(groupID);
//		this.oldSubjectID = MarketDataUtils.BeToLe(oldSubjectID);
//		this.convergenceID = MarketDataUtils.BeToLe(convergenceID);
//		this.oldSequenceNo = MarketDataUtils.BeToLe(oldSequenceNo);
//		this.pubNodeID = MarketDataUtils.BeToLe(pubNodeID);
//		this.riskID = MarketDataUtils.BeToLe(riskID);
//		this.matchID = MarketDataUtils.BeToLe(matchID);
//		this.errorID = MarketDataUtils.BeToLe(errorID);




		debug.simPrintf(sof, "Kernel Got In Cycle[ %d ]:contentLength = 0x%02x\n", cycleCount, contentLength);

		DFEVar xtpHeaderSize = constant.var(dfeUInt(MathUtils.bitsToAddress(68)), 68);
		int xtpContentMaxSize = 32; //Assume Currently we can handle maximum 32 bytes content,Note: maximum content length should equal to 2^contentLength
		DFEVar contentSuperWord = removeHeader(superWord, xtpHeaderSize);
		contentSuperWord = extractMaximumBytes(contentSuperWord, 0, xtpContentMaxSize);
		contentSuperWord = extractExactlyContent(contentLength.cast(dfeUInt(5)), contentSuperWord);
		content =Reductions.streamHold(contentSuperWord, sof);


		//Here we do different operations according to the tid
		InitCommPhaseFieldHandler is = new InitCommPhaseFieldHandler(this, tid, content);
		DFEVar commPhaseNo = is.process();
		debug.simPrintf(sof, "Kernel Got in Cycle [%d]: commPhaseNo = 0x%02x, GlobalStateItems.commPhaseNo = 0x%02x\n", cycleCount, commPhaseNo, GlobalStateItems.commPhaseNo);


//		DFEVar tradingDayContent = is.getTradingDay();
//		debug.simPrintf(sof, "Kernel Got In Cycle[ %d ]: Trading Day Content: \n", cycleCount);
//		for(int i = 0; i < 9; i ++)
//		{
//			debug.simPrintf(sof, "0x%02x ", tradingDayContent.slice(i * 8, 8).cast(dfeUInt(8)));
//		}
//		debug.simPrintf(sof, "\n");
//		DFEVar commPhaseNoInContent = is.getCommPhaseNo();
//		debug.simPrintf(sof, "Kernel Got In Cycle[ %d ]: Comm Phase No in Content: %d\n", cycleCount, commPhaseNoInContent.cast(dfeUInt(16)));
//		debug.simPrintf(sof, "Kernel Got In Cycle[ %d ]:Comm Phase No in Content In Bytes:\n", cycleCount);
//		for(int i = 0; i < 2; i ++)
//		{
//			debug.simPrintf(sof, "0x%02x ", commPhaseNoInContent.slice(i * 8, 8).cast(dfeUInt(8)));
//		}
//		debug.simPrintf(sof, "\n");





		FrameData<OutputFrameFormat> frameOut = genOutputFrame();


		io.frameOutput(frameOutputName, frameOut, constant.var(true), sof);
	}

	private void muxHandler(DFEVar cycleCount, DFEVar sof,
			                  DFEVar initCommPhaseResult, DFEVar initExchangeTradingDayResult,
			                  DFEVar genResult, DFEVar pushResult, DFEVar processResult)
	{
		DFEVar[] subSelect = new DFEVar[10];
		subSelect[0] =  tid.eq(TID.TID_NtfCommPhaseChange);
		subSelect[1] =  tid.eq(TID.TID_ExchangeDataSyncStart);
		subSelect[2] =  tid.eq(TID.TID_ExchangeDataSyncEnd);
		subSelect[3] =  tid.eq(TID.TID_SettlementGroupDatasyncStart);
		subSelect[4] =  tid.eq(TID.TID_SettlementGroupDataSyncEnd);
		subSelect[5] =  tid.eq(TID.TID_NtfTimeSync);
		subSelect[6] =  tid.eq(TID.TID_NtfMarketData);
		subSelect[7] =  tid.eq(TID.TID_InitInstrument);
		subSelect[8] =  tid.eq(TID.TID_NtfOrder);
		subSelect[9] =  tid.eq(TID.TID_NtfTrade);

		DFEVar select = subSelect[0] # subSelect[1] # subSelect[2] # subSelect[3] # subSelect[4]
		               # subSelect[5] # subSelect[6] # subSelect[7] # subSelect[8] # subSelect[9];

		DFEVar sources[] = new DFEVar[1024];
		sources[512] = initCommPhaseResult;
		sources[256] = initExchangeTradingDayResult;
		sources[128] = initCommPhaseResult;
		sources[64] = initCommPhaseResult;
		sources[32] = initCommPhaseResult;
		sources[16] = pushResult;
		sources[8] = genResult;
		sources[4] = initCommPhaseResult;
		sources[2] = processResult;
		sources[1] = processResult;

		for(int i = 0; i < 1024; i ++)
		{
			if( 1 == i || 2 == i || 4 == i || 8 == i || 16 == i || 32 == i || 64 == i || 128 == i || 256 == i || 512 == i)
			{
				continue;
			}
			sources[i] = constant.var(dfeUInt(32), 1001);
		}


		DFEVar result = control.mux(select, sources);
		debug.simPrintf(sof, "Kernel Got In Cycle[ %d ]: Tid = %#010x, process result = %d\n", cycleCount, tid, result);
	}

	private FrameData<OutputFrameFormat> genOutputFrame() {
		OutputFrameFormat outputFormat = new OutputFrameFormat();
		FrameData<OutputFrameFormat> frameOut = new FrameData<OutputFrameFormat>(this,outputFormat,outputLinkType);

		frameOut["type"] <== type;
		frameOut["chain"] <== chain;
		frameOut["fttype"] <== fttype;
		frameOut["padding1"] <== padding1;
		frameOut["contentLength"] <== contentLength;
		frameOut["padding2"] <== padding2;
		frameOut["subjectID"] <== subjectID;
		frameOut["tid"] <== tid;
		frameOut["commPhaseNo"] <== commPhaseNo;
		frameOut["sequenceNo"] <== sequenceNo;
		frameOut["frontSeqNo"] <== frontSeqNo;
		frameOut["requestID"] <== requestID;
		frameOut["sessionID"] <== sessionID;
		frameOut["frontID"] <== frontID;
		frameOut["padding3"] <== padding3;
		frameOut["groupID"] <== groupID;
		frameOut["oldSubjectID"] <== oldSubjectID;
		frameOut["convergenceID"] <== convergenceID;
		frameOut["oldSequenceNo"] <== oldSequenceNo;
		frameOut["pubNodeID"] <== pubNodeID;
		frameOut["riskID"] <== riskID;
		frameOut["matchID"] <== matchID;
		frameOut["padding4"] <== padding4;
		frameOut["errorID"] <== errorID;
		frameOut["content"] <== content;
		return frameOut;
	}

	private DFEVar extractExactlyContent(DFEVar sz, DFEVar v)
	{
		int numSignBits = v.getType().getTotalBits() / 8;
		int maskSizeBytes = 1 << sz.getType().getTotalBits();

		if (numSignBits != maskSizeBytes) {

			throw new RuntimeException("Number of sign bits must be equal to the byte size of the mask!");
		}

		List<DFEVar> signBits = new ArrayList<DFEVar>(numSignBits);

		for (int i=0; i < numSignBits; i++) {
			signBits.add(i == 0 ? v.slice(numSignBits * 8 - 1) : v.slice(i* 8 - 1));
		}

		DFEVar theSignBit = control.mux(sz, signBits);


		List<DFEVar> masks = new ArrayList<DFEVar>(maskSizeBytes);

		for (int i=0; i < maskSizeBytes; i++)
		{

			DFEVar ones = constant.var(dfeRawBits((maskSizeBytes - i) * 8), Bits.allOnes((maskSizeBytes - i)*8));

			if (i > 0) {
				DFEVar zeros = constant.var(dfeRawBits(i * 8), Bits.allZeros(i*8));
				masks.add(ones # zeros);
			} else {
				DFEVar zeros = constant.var(dfeRawBits(maskSizeBytes * 8), Bits.allZeros(maskSizeBytes*8));
				masks.add(zeros);
			}
		}

		DFEVar signmask = control.mux(sz, masks);
		DFEVar mask = ~signmask;

		v = v & mask;

		v = v | (theSignBit ? signmask : 0);

		return v;
	}

	private DFEVar extractMaximumBytes(DFEVar v, int baseIndex, int howMany) {
		return v.slice(baseIndex * 8, howMany * 8);
	}

	private DFEVar removeHeader(DFEVar v, DFEVar shiftAmount) {
		int vecSize = v.getType().getTotalBits() / 8;
		DFEVectorType<DFEVar> vecType = new DFEVectorType<DFEVar>(dfeRawBits(8), vecSize);
		DFEVector<DFEVar> array = vecType.newInstance(this);
		for (int i=0; i < vecSize; i++) {
			array.get(i) <== v.slice(i*8, 8);
		}

		shiftAmount = shiftAmount.cast(dfeUInt(MathUtils.bitsToAddress(vecSize)));

		return array.shiftElementsRight(shiftAmount).pack();
	}
}

