package cn.edu.tsinghua.kernel;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.Max3NetworkConnection;
import com.maxeler.networking.v1.managers.netlib.UDPChecksumMode;
import com.maxeler.networking.v1.managers.netlib.UDPConnectionMode;
import com.maxeler.networking.v1.managers.netlib.UDPStream;


public class MarketDataServerManager extends NetworkManager {

	public MarketDataServerManager(MarketDataServiceEngineParameters params) {
		super(params.getEngineParams());

		debug.setDebugLevel(new DebugLevel().setHasStreamStatus(params.hasStreamStatus()));

		//UDPStream frameIn = addUDPStream("udpTopPort1", Max4NetworkConnection.QSFP_TOP_10G_PORT1, UDPConnectionMode.OneToOne, UDPChecksumMode.DropBadFrames);
		UDPStream frameIn = addUDPStream("udpTopPort1", Max3NetworkConnection.CH2_SFP1, UDPConnectionMode.OneToOne, UDPChecksumMode.DropBadFrames);

		ManagerClock netClk = getNetworkClock(Max3NetworkConnection.CH2_SFP1);
		pushDefaultClock(netClk);

		KernelConfiguration myKernelConfig = new KernelConfiguration(getCurrentKernelConfig());
//		myKernelConfig.debug.setEnableLatencyAnnotation(true);
//		myKernelConfig.debug.setEnableLongestPathAnnotation(SignExtKernel.INPUT_INTERNAL, SignExtKernel.OUTPUT_MY_OUTPUT);
		KernelBlock kernel = addKernel(new MarketDataServiceKernel(makeKernelParameters("exampleKernel", myKernelConfig)));
		//KernelBlock kernel = addKernel(new FieldAccumulatorKernel(makeKernelParameters("exampleKernel", myKernelConfig)));
		kernel.getInput(MarketDataServiceKernel.frameInputName) <== frameIn.getReceiveStream();
		addFramedStreamToCPU("toCPU", MarketDataServiceKernel.outputLinkType) <== kernel.getOutput(MarketDataServiceKernel.frameOutputName);
	}

	public static void main(String[] args) {
		MarketDataServiceEngineParameters params = new MarketDataServiceEngineParameters(args);
		MarketDataServiceManager manager = new MarketDataServiceManager(params);

		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}

}






/*import static com.maxeler.maxcompiler.v2.managers.standard.Manager.UDP;
import static com.maxeler.maxcompiler.v2.managers.standard.Manager.link;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.managers.standard.Manager;
import com.maxeler.maxcompiler.v2.managers.standard.Manager.NetworkConnection;
import com.maxeler.maxcompiler.v2.managers.standard.Manager.UDPConnectionMode;

public class MarketDataServerManager {

	public static void main(String[] args) {
		Manager m = new Manager(new MarketDataServerEngineParameters(args));

		Kernel k = new MarketDataServerKernel(m.makeKernelParameters("MarketDataServerKernel"));
		m.setKernel(k);

		m.setIO(link("frameIn",  UDP(NetworkConnection.CH2_SFP1, UDPConnectionMode.OneToMany)),
		        link("frameOut", UDP(NetworkConnection.CH2_SFP1, UDPConnectionMode.OneToMany)));

		//m.setIO(link("frameOutMix", UDP(NetworkConnection.CH2_SFP2, UDPConnectionMode.OneToOne)));

		m.build();
	}
}
*/
