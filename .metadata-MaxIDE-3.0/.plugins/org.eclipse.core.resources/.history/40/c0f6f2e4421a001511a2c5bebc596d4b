package cn.edu.tsinghua.kernel;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.networking.v1.kernel_types.UDPOneToOneTXType;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.networking.v1.managers.netlib.Max3NetworkConnection;
import com.maxeler.networking.v1.managers.netlib.UDPChecksumMode;
import com.maxeler.networking.v1.managers.netlib.UDPConnectionMode;
import com.maxeler.networking.v1.managers.netlib.UDPStream;


public class MarketDataServiceManager extends NetworkManager {

	public MarketDataServiceManager(MarketDataServiceEngineParameters params) {
		super(params.getEngineParams());

		debug.setDebugLevel(new DebugLevel().setHasStreamStatus(params.hasStreamStatus()));

		UDPStream frameIn = addUDPStream("udpTopPort1", Max3NetworkConnection.CH2_SFP1, UDPConnectionMode.OneToOne, UDPChecksumMode.DropBadFrames);

		ManagerClock netClk = getNetworkClock(Max3NetworkConnection.CH2_SFP1);
		pushDefaultClock(netClk);

		KernelConfiguration myKernelConfig = new KernelConfiguration(getCurrentKernelConfig());
	  KernelBlock kernel = addKernel(new MarketDataServiceKernel(makeKernelParameters("marketDataServiceKernel", myKernelConfig)));
		kernel.getInput("frameIn") <== frameIn.getReceiveStream();
		addFramedStreamToCPU("toCPU", new UDPOneToOneTXType()) <== kernel.getOutput("frameOut");
	}

	public static void main(String[] args)  {
		MarketDataServiceEngineParameters params = new MarketDataServiceEngineParameters(args);
		MarketDataServiceManager manager = new MarketDataServiceManager(params);

		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}

}

