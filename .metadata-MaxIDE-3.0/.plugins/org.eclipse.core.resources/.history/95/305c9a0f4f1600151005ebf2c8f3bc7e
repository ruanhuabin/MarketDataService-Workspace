package cn.edu.tsinghua.tidhandler;


import cn.edu.tsinghua.constant.TID;
import cn.edu.tsinghua.state.GlobalStateItems;
import cn.edu.tsinghua.utils.MarketDataUtils;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class NtfExchangeDataSyncHandler extends TidHandlerBase
{


	private final int tradingDaySize = 9;
	private final int exchangeIDSize = 9;
	private final int fieldHeaderSize = 4;
	private final MarketDataUtils mdu;

	public NtfExchangeDataSyncHandler(Kernel owner, DFEVar tid, DFEVar content) {
		// TODO Auto-generated constructor stub
		super(owner, tid, content);
		mdu = new MarketDataUtils(owner);
	}


	public DFEVar getTradingDay()
	{
		DFEVar tradingDayLen = constant.var(DFETypeFactory.dfeUInt(16), tradingDaySize);

		//Copy is must, otherwise content will be changed by calling following extractExactlyContent(...)
		DFEVar tmpContent = mdu.copyBytes(content, 15).cast(DFETypeFactory.dfeRawBits(8 * 32));
		tmpContent = mdu.removeBytes(tmpContent, fieldHeaderSize);
		tmpContent = constant.var(DFETypeFactory.dfeRawBits(32), Bits.allOnes(4*8)) # tmpContent;
		DFEVar tradingDayContent = mdu.extractExactlyContent(tradingDayLen.cast(DFETypeFactory.dfeUInt(5)), tmpContent);

		return tradingDayContent.slice(0, this.tradingDaySize * 8);
	}
	public DFEVar getExchangeID()
	{
		DFEVar exchangeIDLen = constant.var(DFETypeFactory.dfeUInt(16), this.exchangeIDSize);
		DFEVar tmpContent = this.mdu.copyBytes(this.content, 15).cast(DFETypeFactory.dfeRawBits(8 * 32));
		tmpContent = this.mdu.removeBytes(tmpContent, this.fieldHeaderSize + this.tradingDaySize);
		tmpContent = constant.var(DFETypeFactory.dfeRawBits(4*8 + this.tradingDaySize * 8), Bits.allOnes(4*8 + this.tradingDaySize * 8)) # tmpContent;
		DFEVar exchangeID = this.mdu.extractExactlyContent(exchangeIDLen.cast(DFETypeFactory.dfeUInt(5)), tmpContent);

		return exchangeID.slice(0, this.exchangeIDSize * 8);
	}

	@Override
	public DFEVar process() {
		// TODO Auto-generated method stub

		 DFEVar currentCycle = kernel.control.count.simpleCounter(16);
	    //DFEVar currentPktTid = frameIn[Name.XTPHeader.tid];
	    DFEVar isDataSynStartPktProcess = Reductions.streamHold(currentPktTid.eq(TID.TID_ExchangeDataSyncStart), currentPktTid.eq(TID.TID_ExchangeDataSyncStart));
	    DFEVar isDataSynEndPktProcess = Reductions.streamHold(currentPktTid.eq(TID.TID_ExchangeDataSyncEnd), currentPktTid.eq(TID.TID_ExchangeDataSyncEnd));

	    kernel.debug.simPrintf("===============================>Kernel Got in Cycle [%d]: currentPktTid = %#010x, isDataSynStartPktProcess = %d, isDataSynEndPktProcess = %d\n",
	    		currentCycle, this.tid, isDataSynStartPktProcess, isDataSynEndPktProcess);

	     DFEVar globalDataSynStateFlag = isDataSynStartPktProcess # isDataSynEndPktProcess;


	    kernel.debug.simPrintf("<=================================================================================\n");
	    kernel.popResetBetweenFrames();
	    DFEVar exchangeDataSyncStates[] = new DFEVar[4];
	    exchangeDataSyncStates[0] = kernel.constant.var(DFETypeFactory.dfeUInt(2),MDGlobalStateConstants.EXCHANGE_DATA_SYNC_STATUS_ASYNCHRONOUS);
	    exchangeDataSyncStates[1] = kernel.constant.var(DFETypeFactory.dfeUInt(2),MDGlobalStateConstants.EXCHANGE_DATA_SYNC_STATUS_SYNCHRONIZED);
	    exchangeDataSyncStates[2] = kernel.constant.var(DFETypeFactory.dfeUInt(2),MDGlobalStateConstants.EXCHANGE_DATA_SYNC_STATUS_SYNCHRONIZING);
	    exchangeDataSyncStates[3] = kernel.constant.var(DFETypeFactory.dfeUInt(2),MDGlobalStateConstants.EXCHANGE_DATA_SYNC_STATUS_SYNCHRONIZED);
	    GlobalStateItems.exchangeSyncStatus = kernel.control.mux(globalDataSynStateFlag, exchangeDataSyncStates);


		return GlobalStateItems.exchangeSyncStatus;
	}



}
